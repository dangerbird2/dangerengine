{"version":3,"file":"dangerbird_bin.js","sources":["/Users/Shea/Projects/dangerengine/src/exec.c","/Users/Shea/Projects/dangerengine/src/slscontext.c","/Users/Shea/Projects/dangerengine/src/slsutils.c","/Users/Shea/Projects/dangerengine/src/slsloop.c","/Users/Shea/Projects/dangerengine/src/sls-handlers.c"],"names":[],"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","sourcesContent":["//\n// Created by Steven on 4/25/15.\n//\n\n#include \"dangerengine.h\"\n#include <assert.h>\n\n#ifdef __EMSCRIPTEN__\n#include <emscripten.h>\n#endif //__EMSCRIPTEN__\n\nint sls_main()\n{\n    sls_sleep((size_t)(1.2 * CLOCKS_PER_SEC));\n    slsContext *c = sls_context_new(\"window\", 640, 640);\n\n    slsMainLoop *mainloop = sls_mainloop_new(c);\n    assert(c);\n    assert(mainloop->priv);\n\n    sls_msg(mainloop, run);\n    sls_msg(mainloop, dtor);\n\n    return 0;\n}\n\n\nint main(int argc, char *argv[])\n{\n\n#ifdef __EMSCRIPTEN__\n  EM_ASM({\n    var canvas = document.getElementById('canvas');\n    Module.canvas = canvas;\n  });\n#endif //__EMSCRIPTEN__\n\n  return sls_main();\n}\n\n","//\n// Created by Steven on 4/25/15.\n//\n\n#include \"slscontext.h\"\n#include \"slsutils.h\"\n#include <GLFW/glfw3.h>\n#include <stdlib.h>\n#include <stdio.h>\n\n#include \"sls-handlers.h\"\n\nslsContext * sls_context_init(slsContext *self,\n                              char const *caption,\n                              size_t width,\n                              size_t height);\n\n\n\nvoid sls_context_dtor(slsContext *self);\n\nstatic const slsContext sls_context_proto = {\n        .init = sls_context_init,\n        .dtor = sls_context_dtor,\n        .window = NULL\n};\n\n\nslsContext const *sls_context_class() {\n\n    return &sls_context_proto;\n}\n\nslsContext *sls_context_new(char const *caption, size_t width, size_t height)\n{\n  \n  slsContext *self = sls_objalloc(sls_context_class(), sizeof(slsContext));\n\n\n  return self->init(self, caption, width, height);\n}\n\n\nslsContext *sls_context_init(slsContext *self,\n                             char const *caption,\n                             size_t width,\n                             size_t height)\n{\n    if (!self) { return NULL; }\n    *self = sls_context_proto;\n\n    if (!sls_is_active()) {\n        bool res = sls_init();\n    }\n\n    char const *capA = caption ? caption : \"\";\n\n    self->window = glfwCreateWindow((int)width, (int)height, capA, NULL, NULL);\n    sls_check(self->window, \"window creation failed\");\n\n    sls_bind_context(self);\n\n    return self;\nerror:\n    if (self && self->dtor) {\n        sls_msg(self, dtor);\n    }\n    else if (self) {\n        free(self);\n    }\n    return NULL;\n}\n\nvoid sls_context_dtor(slsContext *self)\n{\n\n    if (self) {\n        free(self);\n    }\n\n}\n","//\n// Created by Steven on 4/25/15.\n//\n\n#include \"slsutils.h\"\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nvoid *sls_objalloc(void const *prototype, size_t size) {\n    void *obj = NULL;\n    obj = calloc(size, 1);\n    sls_checkmem(obj);\n    memcpy(obj, prototype, size);\n    return obj;\n\nerror:\n    return NULL;\n}\n\nvoid sls_sleep(clock_t ticks)\n{\n    clock_t init_time = clock();\n    bool waiting = true;\n    while (clock() - init_time < ticks) {}\n}","//\n// Created by Steven on 4/27/15.\n//\n\n#include \"slsloop.h\"\n#include \"slsutils.h\"\n#include \"sls-handlers.h\"\n#include <stdio.h>\n#include <stdlib.h>\n\n#ifdef __EMSCRIPTEN__\n#include <emscripten.h>\n#endif //__EMSCRIPTEN__\n\nslsMainLoop *sls_mainloop_init(slsMainLoop *self, slsContext *ctx);\n\nvoid sls_mainloop_dtor(slsMainLoop *self);\n\nvoid sls_mainloop_run(slsMainLoop *self);\n\nvoid sls_mainloop_iter(slsMainLoop *self);\n\nvoid sls_mainloop_handle_events(slsMainLoop *self, double dt);\n\nvoid sls_mainloop_update(slsMainLoop *self, double dt);\n\nvoid sls_mainloop_display(slsMainLoop *self, double dt);\n\nvoid em_iter_fn();\n\n\n/**\n * @brief private struct definition for slsMainLoop\n */\nstruct slsMainLoop_p {\n  slsContext *ctx;\n};\n\nstatic const slsMainLoop sls_mainloop_proto = {\n  .init = sls_mainloop_init,\n  .dtor = sls_mainloop_dtor,\n  .run = sls_mainloop_run,\n  .iter = sls_mainloop_iter,\n  .update = sls_mainloop_update,\n  .display = sls_mainloop_display,\n  .is_running = false,\n  .interval = 20,\n  .last_time = 0,\n  .dt = 0,\n  .priv = NULL\n};\n\nstatic slsMainLoop *sls_active_loop = NULL;\n\nconst slsMainLoop *sls_mainloop_class()\n{\n  return &sls_mainloop_proto;\n}\n\nslsMainLoop *sls_mainloop_new(slsContext *ctx)\n{\n  slsMainLoop *self = sls_objalloc(sls_mainloop_class(), sizeof(slsMainLoop));\n  return sls_msg(self, init, ctx);\n}\n\nvoid sls_mainloop_dtor(slsMainLoop *self)\n{\n  if (!self) { return; }\n  if (self->priv && self->priv->ctx) {\n    sls_msg(self->priv->ctx, dtor);\n    free(self->priv);\n  }\n  free(self);\n}\n\nslsMainLoop *sls_mainloop_init(slsMainLoop *self, slsContext *ctx)\n{\n  sls_checkmem(self);\n  sls_checkmem(ctx);\n\n  self->priv = calloc(1, sizeof(slsMainLoop_p));\n  sls_checkmem(self->priv);\n\n  self->priv->ctx = ctx;\n\n  return self;\n\n  error:\n  if (self && self->dtor) {\n    sls_msg(self, dtor);\n  }\n  return NULL;\n}\n\nvoid em_iter_fn()\n{\n  if (sls_active_loop && sls_active_loop->is_running) {\n    sls_msg(sls_active_loop, iter);\n  }\n}\n\nvoid sls_mainloop_iter(slsMainLoop *self)\n{\n  if (!self) {return;}\n\n  slsContext *ctx = self->priv->ctx;\n\n\n  clock_t now = clock();\n  self->dt += now - self->last_time;\n\n  self->last_time = now;\n  \n  if (self->dt >= self->interval) {\n    double ddt = self->dt / (double) CLOCKS_PER_SEC;\n\n    printf(\"%f\\n\", ddt);\n    self->dt = 0;\n    sls_msg(self, update, ddt);\n    sls_msg(self, display, ddt);\n  }\n\n  glfwPollEvents();\n\n  if (glfwWindowShouldClose(ctx->window)) {\n    self->is_running = false;\n  }\n}\n\nvoid sls_mainloop_run(slsMainLoop *self)\n{\n  sls_checkmem(self);\n  sls_checkmem(self->priv);\n  sls_checkmem(self->priv->ctx);\n\n  self->last_time = clock();\n  self->dt = 0;\n  self->is_running = true;\n\n  slsContext *ctx = self->priv->ctx;\n\n  sls_bind_context(ctx);\n  sls_active_loop = self;\n\n  /*\n   * set mainloop for native or emscripten execution\n   */\n#ifdef __EMSCRIPTEN__\n  emscripten_set_main_loop(em_iter_fn, \n                           self->interval/(double)CLOCKS_PER_SEC,\n                           1);\n#else //!__EMSCRIPTEN__\n  while (self->is_running) {\n    sls_msg(self, iter);\n  }\n#endif //__EMSCRIPTEN__\n\n  sls_active_loop = NULL;\n  return;\nerror:\n  return;\n  sls_log_err(\"error label reached %s\", __func__);\n}\n\nvoid sls_mainloop_update(slsMainLoop *self, double dt)\n{\n\n}\n\nvoid sls_mainloop_display(slsMainLoop *self, double dt)\n{\n  if (!self->priv || !self->priv->ctx) {\n    return;\n  }\n  slsContext *ctx = self->priv->ctx;\n  glClear(GL_COLOR_BUFFER_BIT);\n\n  glfwSwapBuffers(ctx->window);\n\n}\n\n","//\n// Created by Steven on 5/2/15.\n//\n\n#include \"sls-handlers.h\"\n#include \"slsutils.h\"\n\nstatic bool sls_active_flag = false;\nslsContext *sls_active_context = NULL;\n\nvoid sls_bind_context(slsContext *ctx)\n{\n  sls_unbind_context();\n\n  sls_active_context = ctx;\n  glfwMakeContextCurrent(ctx->window);\n\n  return;\n}\n\nvoid sls_unbind_context(void)\n{\n  if (sls_active_context) {\n    glfwMakeContextCurrent(NULL);\n    sls_active_context = NULL;\n  }\n}\n\nbool sls_init(void)\n{\n  sls_check(!sls_active_flag, \"runtime is already active!\");\n  sls_check(glfwInit(), \"glfw Init failed\");\n\n  sls_active_flag = true;\n\n  atexit(sls_terminate);\n\n  return true;\nerror:\n  return false;\n}\n\nvoid sls_terminate(void)\n{\n  if (!sls_active_flag) {\n    return;\n  }\n\n  glfwTerminate();\n  sls_active_flag = false;\n}\n\nbool sls_is_active(void)\n{\n  return sls_active_flag;\n}\n"]}