{"version":3,"file":"dangerbird_bin.js","sources":["/Users/Shea/Projects/dangerengine/src/exec.c","/Users/Shea/Projects/dangerengine/src/slscontext.c","/Users/Shea/Projects/dangerengine/src/slsutils.c","/Users/Shea/Projects/dangerengine/src/sls-handlers.c"],"names":[],"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","sourcesContent":["//\n// Created by Steven on 4/25/15.\n//\n\n#include \"dangerengine.h\"\n#include <assert.h>\n\n#ifdef __EMSCRIPTEN__\n#include <emscripten.h>\n#endif //__EMSCRIPTEN__\n\nint sls_main()\n{\n    sls_sleep((size_t)(1.2 * CLOCKS_PER_SEC));\n    slsContext *c = sls_context_new(\"window\", 640, 640);\n\n    assert(c);\n\n\n    sls_msg(c, run);\n    sls_msg(c, dtor);\n\n    return 0;\n}\n\n\nint main(int argc, char *argv[])\n{\n\n#ifdef __EMSCRIPTEN__\n  EM_ASM({\n    var canvas = document.getElementById('canvas');\n    Module.canvas = canvas;\n  });\n#endif //__EMSCRIPTEN__\n\n  return sls_main();\n}\n\n","//\n// Created by Steven on 4/25/15.\n//\n#include \"sls-gl.h\"\n\n#include \"slscontext.h\"\n#include \"slsutils.h\"\n\n\n#include <stdlib.h>\n#include <stdio.h>\n\n#include \"sls-handlers.h\"\n\n\n#ifdef EMSCRIPTEN\n#   include <emscripten.h>\n#endif //EMSCRIPTEN\n\nstruct slsContext_p {\n  clock_t last;\n  clock_t dt_acc;\n};\n\nvoid sls_context_run(slsContext *self);\n\nvoid sls_context_iter(slsContext *self);\n\n\nvoid sls_context_resize(slsContext *self, int x, int y);\n\nvoid sls_context_update(slsContext *self, double dt);\n\nvoid sls_context_display(slsContext *self, double dt);\n\nslsContext *sls_context_init(slsContext *self,\n                             char const *caption,\n                             size_t width,\n                             size_t height);\n\n\nvoid sls_context_setup(slsContext *self);\n\nvoid sls_context_teardown(slsContext *self);\n\nvoid sls_context_dtor(slsContext *self);\n\nstatic const slsContext sls_context_proto = {\n  .init = sls_context_init,\n  .dtor = sls_context_dtor,\n\n  .setup = sls_context_setup,\n  .teardown = sls_context_teardown,\n\n  .run = sls_context_run,\n  .iter = sls_context_iter,\n  .resize = sls_context_resize,\n\n  .update = sls_context_update,\n  .display = sls_context_display,\n\n  .is_running = SLS_FALSE,\n  .interval = 50,\n  .priv = NULL,\n  .window = NULL\n};\n\n\nslsContext const *sls_context_class()\n{\n\n  return &sls_context_proto;\n}\n\nslsContext *sls_context_new(char const *caption, size_t width, size_t height)\n{\n\n  slsContext *self = sls_objalloc(sls_context_class(), sizeof(slsContext));\n\n\n  return self->init(self, caption, width, height);\n}\n\n\nslsContext *sls_context_init(slsContext *self,\n                             char const *caption,\n                             size_t width,\n                             size_t height)\n{\n\n  // nullptr check and initialize class values\n  if (!self) { return NULL; }\n  *self = *sls_context_class();\n\n  // initialize libraries if not active\n  if (!sls_is_active()) {\n    bool res = sls_init();\n  }\n\n\n  // glfw window hints\n\n# ifndef EMSCRIPTEN // glwf hints not relavent to emscripten environment\n  {\n    glfwWindowHint(GLFW_DOUBLEBUFFER, GL_TRUE);\n\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n\n    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n  };\n# endif //!EMSCRIPTEN\n\n  // create glfw window\n  self->window = glfwCreateWindow((int) width, (int) height, caption, NULL, NULL);\n  sls_check(self->window, \"window creation failed\");\n\n  // allocate and initialize private members\n  self->priv = calloc(1, sizeof(slsContext_p));\n  sls_checkmem(self->priv);\n  *(self->priv) = (slsContext_p) {.dt_acc=0, .last=0};\n\n  return self;\n\n  /// exception\n  error:\n  if (self && self->dtor) {\n    sls_msg(self, dtor);\n  }\n  else if (self) {\n    free(self);\n  }\n  return NULL;\n}\n\nvoid sls_context_dtor(slsContext *self)\n{\n  if (self) {\n    if (self->priv) {\n      free(self->priv);\n    }\n    free(self);\n  }\n}\n\n\nvoid sls_context_run(slsContext *self)\n{\n  if (!self || !self->priv) { return; }\n  self->priv->last = clock();\n  self->priv->dt_acc = 0;\n\n  self->is_running = SLS_TRUE;\n\n  sls_msg(self, setup);\n\n# ifndef EMSCRIPTEN\n  while (self->is_running) {\n    sls_msg(self, iter);\n  }\n# else\n\n  emscripten_set_main_loop_arg(sls_emscripten_loop, self, -1, SLS_FALSE);\n\n# endif //!EMSCRIPTEN\n\n  sls_msg(self, teardown);\n\n}\n\nvoid sls_context_iter(slsContext *self)\n{\n  if (!self || !self->priv) {\n    return;\n  }\n  clock_t now = clock();\n  slsContext_p *priv = self->priv;\n  priv->dt_acc += now - priv->last;\n  priv->last = now;\n\n\n  if (priv->dt_acc > self->interval) {\n    double dt = priv->dt_acc / (double) CLOCKS_PER_SEC;\n    priv->dt_acc = 0;\n    sls_msg(self, update, dt);\n    sls_msg(self, display, dt);\n  }\n\n  glfwPollEvents();\n  if (glfwWindowShouldClose(self->window)) {\n    self->is_running = SLS_FALSE;\n  }\n}\n\n\nvoid sls_context_resize(slsContext *self, int x, int y)\n{\n  glViewport(0, 0, (int) x, (int) y);\n}\n\nvoid sls_context_update(slsContext *self, double dt) { }\n\nvoid sls_context_display(slsContext *self, double dt)\n{\n  if (!self || !self->priv) { return; }\n  glClear(GL_COLOR_BUFFER_BIT);\n\n  glfwSwapBuffers(self->window);\n}\n\nvoid sls_context_setup(slsContext *self)\n{\n  sls_bind_context(self);\n\n# ifndef SLS_NOGLEW\n  {\n    GLenum glew = glewInit();\n    if (glew != GLEW_OK) {\n      sls_log_err(\"glew error: %s\", glewGetErrorString(glew));\n      self->is_running = SLS_FALSE;\n      sls_log_info(\"glew version\", glewGetString(GLEW_VERSION));\n    }\n  }\n# endif\n\n  sls_log_info(\"openGL version %s\", glGetString(GL_VERSION));\n\n  // setup opengl pipeline\n\n  int width, height;\n  glfwGetWindowSize(self->window, &width, &height);\n\n  sls_msg(self, resize, width, height);\n\n\n}\n\nvoid sls_context_teardown(slsContext *self)\n{\n  sls_unbind_context();\n}\n\n\nvoid sls_emscripten_loop(void *vctx)\n{\n  if (!vctx) {return;}\n  slsContext *ctx = vctx;\n  sls_msg(ctx, iter);\n}","//\n// Created by Steven on 4/25/15.\n//\n\n#include \"slsutils.h\"\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nvoid *sls_objalloc(void const *prototype, size_t size)\n{\n  void *obj = NULL;\n  obj = calloc(size, 1);\n  sls_checkmem(obj);\n  memcpy(obj, prototype, size);\n  return obj;\n\n  error:\n  return NULL;\n}\n\nvoid sls_sleep(clock_t ticks)\n{\n  clock_t init_time = clock();\n  bool waiting = true;\n  while (clock() - init_time < ticks) { }\n}\n","//\n// Created by Steven on 5/2/15.\n//\n\n#include \"sls-handlers.h\"\n#include \"slsutils.h\"\n#include <stdlib.h>\n#include <stdbool.h>\n\nstatic slsBool sls_active_flag = SLS_FALSE;\nslsContext *sls_active_context = NULL;\n\nvoid sls_error_cback(int, const char *);\nvoid sls_mouse(GLFWwindow*, int, int, int);\nvoid sls_window_resize(GLFWwindow *win, int x, int y);\n\n\n\nvoid sls_bind_context(slsContext *ctx)\n{\n  sls_unbind_context();\n\n  glfwSetErrorCallback(sls_error_cback);\n  glfwSetWindowSizeCallback(ctx->window, sls_window_resize);\n\n\n  sls_active_context = ctx;\n  glfwMakeContextCurrent(ctx->window);\n\n  return;\n}\n\nvoid sls_unbind_context(void)\n{\n  if (sls_active_context) {\n    glfwMakeContextCurrent(NULL);\n    sls_active_context = NULL;\n  }\n}\n\n\nvoid sls_window_resize(GLFWwindow *win, int x, int y)\n{\n  if (sls_active_context) {\n    sls_msg(sls_active_context, resize, (size_t)x, (size_t)y);\n  }\n}\n\n\nbool sls_init(void)\n{\n  sls_check(!sls_active_flag, \"runtime is already active!\");\n  sls_check(glfwInit(), \"glfw Init failed\");\n\n  sls_active_flag = SLS_TRUE;\n\n  atexit(sls_terminate);\n\n  return true;\nerror:\n  return false;\n}\n\nvoid sls_terminate(void)\n{\n  if (!sls_active_flag) {\n    return;\n  }\n\n  glfwTerminate();\n  sls_active_flag = false;\n}\n\nvoid sls_error_cback(int i, char const *string)\n{\n\n}\n\nbool sls_is_active(void)\n{\n  return sls_active_flag;\n}\n"]}