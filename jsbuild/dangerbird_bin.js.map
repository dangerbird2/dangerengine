{"version":3,"file":"dangerbird_bin.js","sources":["/Users/Shea/projects/dangerengine/src/exec.c","/Users/Shea/projects/dangerengine/src/slscontext.c","/Users/Shea/projects/dangerengine/src/slsutils.c","/Users/Shea/projects/dangerengine/src/sls-handlers.c"],"names":[],"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","sourcesContent":["//\n// Created by Steven on 4/25/15.\n//\n\n#include \"dangerengine.h\"\n#include <assert.h>\n\n#ifdef __EMSCRIPTEN__\n#include <emscripten.h>\n#endif //__EMSCRIPTEN__\n\nint sls_main()\n{\n    sls_sleep((size_t)(1.2 * CLOCKS_PER_SEC));\n    slsContext *c = sls_context_new(\"window\", 640, 640);\n\n    assert(c);\n\n\n    sls_msg(c, run);\n    sls_msg(c, dtor);\n\n    return 0;\n}\n\n\nint main(int argc, char *argv[])\n{\n\n#ifdef __EMSCRIPTEN__\n  EM_ASM({\n    var canvas = document.getElementById('canvas');\n    Module.canvas = canvas;\n  });\n#endif //__EMSCRIPTEN__\n\n  return sls_main();\n}\n\n","//\n// Created by Steven on 4/25/15.\n//\n\n#include \"slscontext.h\"\n#include \"slsutils.h\"\n#include <GLFW/glfw3.h>\n\n#ifdef EMSCRIPTEN\n#   include<emscripten.h>\n#endif\n\n\n\n#include <stdlib.h>\n#include <stdio.h>\n\n#include \"sls-handlers.h\"\n\nstruct slsContext_p {\n  clock_t last;\n  clock_t dt_acc;\n};\n\n\n/**\n * @brief callback for emscripten main loop\n * @details [long description]\n * \n * @param vself void pointer to context object\n */\nvoid sls_em_callback(void *vself);\n\nvoid sls_context_run(slsContext *self);\n\nvoid sls_context_iter(slsContext *self);\n\n\n\nvoid sls_context_resize(slsContext *self, size_t x, size_t y);\n\nvoid sls_context_update(slsContext *self, double dt);\n\nvoid sls_context_display(slsContext *self, double dt);\n\nslsContext * sls_context_init(slsContext *self,\n                              char const *caption,\n                              size_t width,\n                              size_t height);\n\n\n\nvoid sls_context_dtor(slsContext *self);\n\nstatic const slsContext sls_context_proto = {\n  .init = sls_context_init,\n  .dtor = sls_context_dtor,\n\n  .run = sls_context_run,\n  .iter = sls_context_iter,\n  .resize = sls_context_resize,\n\n  .update = sls_context_update,\n  .display = sls_context_display,\n\n  .is_running = SLS_FALSE,\n  .interval = 50,\n  .priv = NULL,\n  .window = NULL\n};\n\n\nslsContext const *sls_context_class() {\n\n    return &sls_context_proto;\n}\n\nslsContext *sls_context_new(char const *caption, size_t width, size_t height)\n{\n  \n  slsContext *self = sls_objalloc(sls_context_class(), sizeof(slsContext));\n\n\n  return self->init(self, caption, width, height);\n}\n\n\nslsContext *sls_context_init(slsContext *self,\n                             char const *caption,\n                             size_t width,\n                             size_t height)\n{\n  if (!self) { return NULL; }\n  *self = sls_context_proto;\n\n  if (!sls_is_active()) {\n      bool res = sls_init();\n  }\n\n  char const *capA = caption ? caption : \"\";\n\n  self->window = glfwCreateWindow((int)width, (int)height, capA, NULL, NULL);\n  sls_check(self->window, \"window creation failed\");\n\n  self->priv = calloc(1, sizeof(slsContext_p));\n  sls_checkmem(self->priv);\n\n  *(self->priv) = (slsContext_p) {.dt_acc=0, .last=0};\n\n  return self;\nerror:\n  if (self && self->dtor) {\n    sls_msg(self, dtor);\n  }\n  else if (self) {\n    free(self);\n  }\n  return NULL;\n}\n\nvoid sls_context_dtor(slsContext *self)\n{\n  if (self) {\n    if (self->priv) {\n      free(self->priv);\n    }\n    free(self);\n  }\n}\n\nvoid sls_em_callback(void *vself) \n{\n  slsContext *self = vself;\n  if (self) {\n    sls_msg(self, iter);\n  }\n}\n\nvoid sls_context_run(slsContext *self)\n{\n  if (!self || !self->priv) {return;}\n  self->priv->last = clock();\n  self->priv->dt_acc = 0;\n\n  sls_bind_context(self);\n  self->is_running = SLS_TRUE;\n\n# ifndef EMSCRIPTEN\n  while(self->is_running) {\n    sls_msg(self, iter);\n  }\n# else \n  {\n    const int em_fps = 0; // use request animation frame\n    const slsBool em_infinite_loop = false;\n    emscripten_set_main_loop_arg(sls_em_callback, self, em_fps, em_infinite_loop);\n  }\n# endif\n\n}\n\nvoid sls_context_iter(slsContext *self)\n{\n  if (!self || !self->priv) {\n    return;\n  }\n  clock_t now = clock();\n  slsContext_p *priv = self->priv;\n  priv->dt_acc += now - priv->last;\n  priv->last = now;\n\n\n  if (priv->dt_acc > self->interval) {\n    double dt = priv->dt_acc / (double)CLOCKS_PER_SEC;\n    priv->dt_acc = 0;\n    sls_msg(self, update, dt);\n    sls_msg(self, display, dt);\n    //printf(\"%f\\n\", dt);\n  }\n\n  glfwPollEvents();\n  if (glfwWindowShouldClose(self->window)) {\n    self->is_running = SLS_FALSE;\n  }\n}\n\n\n\nvoid sls_context_resize(slsContext *self, size_t x, size_t y)\n{\n  glViewport(0, 0, (int)x, (int)y);\n}\n\nvoid sls_context_update(slsContext *self, double dt){}\n\nvoid sls_context_display(slsContext *self, double dt)\n{\n  if (!self || !self->priv) { return; }\n  glClear(GL_COLOR_BUFFER_BIT);\n\n  glfwSwapBuffers(self->window);\n}","//\n// Created by Steven on 4/25/15.\n//\n\n#include \"slsutils.h\"\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nvoid *sls_objalloc(void const *prototype, size_t size) {\n    void *obj = NULL;\n    obj = calloc(size, 1);\n    sls_checkmem(obj);\n    memcpy(obj, prototype, size);\n    return obj;\n\nerror:\n    return NULL;\n}\n\nvoid sls_sleep(clock_t ticks)\n{\n    clock_t init_time = clock();\n    bool waiting = true;\n    while (clock() - init_time < ticks) {}\n}","//\n// Created by Steven on 5/2/15.\n//\n\n#include \"sls-handlers.h\"\n#include \"slsutils.h\"\n#include <stdlib.h>\n#include <stdbool.h>\n\nstatic slsBool sls_active_flag = SLS_FALSE;\nslsContext *sls_active_context = NULL;\n\nvoid sls_error_cback(int, const char *);\nvoid sls_mouse(GLFWwindow*, int, int, int);\nvoid sls_window_resize(GLFWwindow *win, int x, int y);\n\n\n\nvoid sls_bind_context(slsContext *ctx)\n{\n  sls_unbind_context();\n\n  glfwSetErrorCallback(sls_error_cback);\n  glfwSetWindowSizeCallback(ctx->window, sls_window_resize);\n\n\n  sls_active_context = ctx;\n  glfwMakeContextCurrent(ctx->window);\n\n  return;\n}\n\nvoid sls_unbind_context(void)\n{\n  if (sls_active_context) {\n    glfwMakeContextCurrent(NULL);\n    sls_active_context = NULL;\n  }\n}\n\n\nvoid sls_window_resize(GLFWwindow *win, int x, int y)\n{\n  if (sls_active_context) {\n    sls_msg(sls_active_context, resize, (size_t)x, (size_t)y);\n  }\n}\n\n\nbool sls_init(void)\n{\n  sls_check(!sls_active_flag, \"runtime is already active!\");\n  sls_check(glfwInit(), \"glfw Init failed\");\n\n  sls_active_flag = SLS_TRUE;\n\n  atexit(sls_terminate);\n\n  return true;\nerror:\n  return false;\n}\n\nvoid sls_terminate(void)\n{\n  if (!sls_active_flag) {\n    return;\n  }\n\n  glfwTerminate();\n  sls_active_flag = false;\n}\n\nvoid sls_error_cback(int i, char const *string)\n{\n\n}\n\nbool sls_is_active(void)\n{\n  return sls_active_flag;\n}\n"]}